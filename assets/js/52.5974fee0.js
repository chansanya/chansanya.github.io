(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{493:function(a,t,n){"use strict";n.r(t);var e=n(14),s=Object(e.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("p",[a._v("记录JAVA命令行参数以及配置加载顺序\n")]),a._v(" "),t("h3",{attrs:{id:"java-命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java-命令"}},[a._v("#")]),a._v(" JAVA 命令")]),a._v(" "),t("h3",{attrs:{id:"h"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#h"}},[a._v("#")]),a._v(" -h")]),a._v(" "),t("p",[a._v("帮助命令及说明")]),a._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('java -h\n\n用法: java [-options] class [args...]\n           (执行类)\n   或  java [-options] -jar jarfile [args...]\n           (执行 jar 文件)\n其中选项包括:\n    -d32          使用 32 位数据模型 (如果可用)\n    -d64          使用 64 位数据模型 (如果可用)\n    -server       选择 "server" VM\n                  默认 VM 是 server,\n                  因为您是在服务器类计算机上运行。\n\n\n    -cp &lt;目录和 zip/jar 文件的类搜索路径>\n    -classpath &lt;目录和 zip/jar 文件的类搜索路径>\n                  用 : 分隔的目录, JAR 档案\n                  和 ZIP 档案列表, 用于搜索类文件。\n    -D&lt;名称>=&lt;值>\n                  设置系统属性\n    -verbose:[class|gc|jni]\n                  启用详细输出\n    -version      输出产品版本并退出\n    -version:&lt;值>\n                  警告: 此功能已过时, 将在\n                  未来发行版中删除。\n                  需要指定的版本才能运行\n    -showversion  输出产品版本并继续\n    -jre-restrict-search | -no-jre-restrict-search\n                  警告: 此功能已过时, 将在\n                  未来发行版中删除。\n                  在版本搜索中包括/排除用户专用 JRE\n    -? -help      输出此帮助消息\n    -X            输出非标准选项的帮助\n    -ea[:&lt;packagename>...|:&lt;classname>]\n    -enableassertions[:&lt;packagename>...|:&lt;classname>]\n                  按指定的粒度启用断言\n    -da[:&lt;packagename>...|:&lt;classname>]\n    -disableassertions[:&lt;packagename>...|:&lt;classname>]\n                  禁用具有指定粒度的断言\n    -esa | -enablesystemassertions\n                  启用系统断言\n    -dsa | -disablesystemassertions\n                  禁用系统断言\n    -agentlib:&lt;libname>[=&lt;选项>]\n                  加载本机代理库 &lt;libname>, 例如 -agentlib:hprof\n                  另请参阅 -agentlib:jdwp=help 和 -agentlib:hprof=help\n    -agentpath:&lt;pathname>[=&lt;选项>]\n                  按完整路径名加载本机代理库\n    -javaagent:&lt;jarpath>[=&lt;选项>]\n                  加载 Java 编程语言代理, 请参阅 java.lang.instrument\n    -splash:&lt;imagepath>\n                  使用指定的图像显示启动屏幕\n                  \n有关详细信息, 请参阅 http://www.oracle.com/technetwork/java/javase/documentation/index.html。\n\n')])])]),t("h3",{attrs:{id:"x"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#x"}},[a._v("#")]),a._v(" -x")]),a._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("-Xmixed           混合模式执行 (默认)\n-Xint             仅解释模式执行\n-Xbootclasspath:&lt;用 : 分隔的目录和 zip/jar 文件>\n设置搜索路径以引导类和资源\n-Xbootclasspath/a:&lt;用 : 分隔的目录和 zip/jar 文件>\n附加在引导类路径末尾\n-Xbootclasspath/p:&lt;用 : 分隔的目录和 zip/jar 文件>\n置于引导类路径之前\n-Xdiag            显示附加诊断消息\n-Xnoclassgc       禁用类垃圾收集\n-Xincgc           启用增量垃圾收集\n-Xloggc:&lt;file>    将 GC 状态记录在文件中 (带时间戳)\n-Xbatch           禁用后台编译\n-Xms&lt;size>        设置初始 Java 堆大小\n-Xmx&lt;size>        设置最大 Java 堆大小\n-Xss&lt;size>        设置 Java 线程堆栈大小\n-Xprof            输出 cpu 配置文件数据\n-Xfuture          启用最严格的检查, 预期将来的默认值\n-Xrs              减少 Java/VM 对操作系统信号的使用 (请参阅文档)\n-Xcheck:jni       对 JNI 函数执行其他检查\n-Xshare:off       不尝试使用共享类数据\n-Xshare:auto      在可能的情况下使用共享类数据 (默认)\n-Xshare:on        要求使用共享类数据, 否则将失败。\n-XshowSettings    显示所有设置并继续\n-XshowSettings:all\n显示所有设置并继续\n-XshowSettings:vm 显示所有与 vm 相关的设置并继续\n-XshowSettings:properties\n显示所有属性设置并继续\n-XshowSettings:locale\n显示所有与区域设置相关的设置并继续\n")])])]),t("h3",{attrs:{id:"查看vm真实应用参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#查看vm真实应用参数"}},[a._v("#")]),a._v(" 查看VM真实应用参数")]),a._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("jinfo -flags &lt;pid>\njava -XX:+PrintFlagsFinal\njava -XX:+PrintCommandLineFlags \n")])])]),t("h2",{attrs:{id:"配置文件加载顺序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#配置文件加载顺序"}},[a._v("#")]),a._v(" 配置文件加载顺序")]),a._v(" "),t("h3",{attrs:{id:"包外"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#包外"}},[a._v("#")]),a._v(" 包外")]),a._v(" "),t("p",[a._v("spring boot 启动会扫描以下位置的application.properties或者application.yml文件作为Spring boot的默认配置文件")]),a._v(" "),t("h3",{attrs:{id:"包内"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#包内"}},[a._v("#")]),a._v(" 包内")]),a._v(" "),t("ol",[t("li",[a._v("命令行参数 java -jar -Ddemo=vm  test.jar  --server.port=8087 --server.context-path=/abc\n"),t("ul",[t("li",[a._v("-Dxxx 为 vm 参数，在代码中通过 System.getProperty 获取")]),a._v(" "),t("li",[a._v("--xxx 为 spring 命令行参数，通过 Environment.getProperty 获取，若通过此方法获取不到，会获取 vm 同名参数")]),a._v(" "),t("li",[a._v("xxx.jar 之后的参数都是 arg 参数，都会在 main 方法中的 arg 数组中获取到")])])]),a._v(" "),t("li",[a._v("来自java:comp/env的JNDI属性")]),a._v(" "),t("li",[a._v("Java系统属性（System.getProperties()）")]),a._v(" "),t("li",[a._v("操作系统环境变量")]),a._v(" "),t("li",[a._v("RandomValuePropertySource配置的random.*属性值")]),a._v(" "),t("li",[a._v("jar包外部的application-{profile}.properties或application.yml(带spring.profile)配置文件")]),a._v(" "),t("li",[a._v("jar包内部的application-{profile}.properties或application.yml(带spring.profile)配置文件")]),a._v(" "),t("li",[a._v("jar包外部的application.properties或application.yml(不带spring.profile)配置文件")]),a._v(" "),t("li",[a._v("jar包内部的application.properties或application.yml(不带spring.profile)配置文件，由jar包外向jar包内进行寻找，优先加载带profile的，再加载不带profile的。")]),a._v(" "),t("li",[a._v("@Configuration注解类上的@PropertySource,不能加载 yaml 文件，只能使用 properties 文件。")]),a._v(" "),t("li",[a._v("通过SpringApplication.setDefaultProperties指定的默认属性")])]),a._v(" "),t("h2",{attrs:{id:"参考文档"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考文档"}},[a._v("#")]),a._v(" 参考文档")]),a._v(" "),t("p",[t("a",{attrs:{href:"https://juejin.cn/post/6844903992376426503#heading-16",target:"_blank",rel:"noopener noreferrer"}},[a._v("外部化配置"),t("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=s.exports}}]);