(window.webpackJsonp=window.webpackJsonp||[]).push([[70],{442:function(e,s,t){"use strict";t.r(s);var n=t(7),a=Object(n.a)({},(function(){var e=this,s=e._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("p",[s("strong",[e._v("在java中用"),s("code",[e._v("extends")]),e._v("和"),s("code",[e._v("super")]),e._v("来限定泛型的边界")])]),e._v(" "),s("hr"),e._v(" "),s("p",[s("code",[e._v("extends")]),e._v("用来限制泛型上界")]),e._v(" "),s("p",[e._v("语法"),s("code",[e._v("<? extends T>")]),e._v("，表示"),s("strong",[e._v("泛型类型")]),e._v("只能为"),s("strong",[e._v("指定类型（T）"),s("strong",[e._v("或")]),e._v("指定类型（T）的子类型")]),e._v("，因此"),s("strong",[e._v("泛型范围<=T")])]),e._v(" "),s("p",[e._v("这意味着你"),s("strong",[e._v("只能读取的值")]),e._v("（保底返回一个最大的T），但"),s("strong",[e._v("不能往容器里面写入")]),e._v("（因为任意写入值的泛型范围有可能会超出T）。")]),e._v(" "),s("hr"),e._v(" "),s("p",[s("code",[e._v("super")]),e._v("用来限制泛型下界")]),e._v(" "),s("p",[e._v("语法"),s("code",[e._v("<? super T>")]),e._v("，表示"),s("strong",[e._v("泛型类型")]),e._v("必须为"),s("strong",[e._v("指定类型（T）"),s("strong",[e._v("或")]),e._v("指定类型（T）的父类型")]),e._v("， 因此"),s("strong",[e._v("泛型范围>=T")])]),e._v(" "),s("p",[e._v("这意味着你"),s("strong",[e._v("只能往这个容器里写入T或父类型为T的数据（也就是T的子类型）"),s("strong",[e._v("这将永远不会超出上限，但")]),e._v("不能读取具体类型")]),e._v("（因为无法得知具体的类型是T还是T的子类型）。")]),e._v(" "),s("hr"),e._v(" "),s("h3",{attrs:{id:"通俗的理解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#通俗的理解"}},[e._v("#")]),e._v(" 通俗的理解")]),e._v(" "),s("p",[e._v("假设有如下代码： "),s("code",[e._v("Bread")]),e._v(" 和 "),s("code",[e._v("Noodles")]),e._v(" 都继承于 "),s("code",[e._v("Food")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("public static class  Food{}\n\npublic static class  Bread extends Food {}\n\npublic static class  Noodles extends Food {}\n")])])]),s("h4",{attrs:{id:"关于extends"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#关于extends"}},[e._v("#")]),e._v(" 关于extends")]),e._v(" "),s("p",[e._v("例如定义了一个 "),s("code",[e._v("List<? extends Food>")]),e._v(" 最上级形态为 "),s("code",[e._v("Food")]),e._v(",")]),e._v(" "),s("p",[e._v("我们给这个列表放置了"),s("code",[e._v("Bread")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("List<? extends Food> foods= new ArrayList<Bread>\n")])])]),s("p",[e._v("这时候我想要："),s("code",[e._v("foods.add(noodles)")]),e._v(" ,"),s("code",[e._v("noodles")]),e._v(" 继承于 "),s("code",[e._v("Bread")]),e._v("，理论上来说这样是没问题的")]),e._v(" "),s("p",[e._v("但是，此时的"),s("code",[e._v("foods")]),e._v(" 类型为"),s("code",[e._v("Bread")]),e._v(" 。把 "),s("code",[e._v("noodles")]),e._v(" 放入 "),s("code",[e._v("Bread")]),e._v(" 的列表显然不合理。")]),e._v(" "),s("p",[e._v("但是此时无论获取到的是"),s("code",[e._v("Bread")]),e._v(" 还是 "),s("code",[e._v("noodles")]),e._v(" 他们都能称之为"),s("code",[e._v("Bread")])]),e._v(" "),s("p",[e._v("所以当进行了上界修饰后的容器：失去了写入能力,保留读取能力")]),e._v(" "),s("h4",{attrs:{id:"关于super"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#关于super"}},[e._v("#")]),e._v(" 关于super")]),e._v(" "),s("p",[e._v("例如定义了一个 "),s("code",[e._v("List<? super Food>")]),e._v(" 最下级形态为 "),s("code",[e._v("Food")]),e._v(",")]),e._v(" "),s("p",[e._v("我们同样给这个列表放置"),s("code",[e._v("Bread")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("List<? super Food> foods= new ArrayList<Bread>();\n")])])]),s("p",[e._v("此时程序无法编译通过，因为 "),s("code",[e._v("Bread")]),e._v(" 为"),s("code",[e._v("Food")]),e._v(" 的子类型，这段代码超出了泛型的下界。")]),e._v(" "),s("p",[e._v("根据下界的规则,可以进行如下修改")]),e._v(" "),s("p",[e._v("方案1")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("// 指定下界 Food ，范围为 Food 或 其父类型, \nList<? super Food> foods= new ArrayList<Food>();\n\n//能写入`Food`,`Bread`,`Noodles` 类型\n")])])]),s("p",[e._v("方案2")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("// 指定下界 Bread ，范围为 Bread 或 其父类型\nList<? super Bread> foods= new ArrayList<Food>();\n\n//只能，能写入`Bread` 类型\n")])])]),s("p",[e._v("以上两种修改都是正确的，区别在于"),s("strong",[e._v("泛型范围不一样,导致能写入的值不同")])]),e._v(" "),s("p",[s("strong",[e._v("方案1")]),e._v("： "),s("code",[e._v("foods")]),e._v("本质为"),s("code",[e._v("Food")]),e._v("列表，无论是加入"),s("code",[e._v("Bread")]),e._v(","),s("code",[e._v("noodles")]),e._v("显然都是合理的，但是在取出的时候，无法获取到具体的类型，仅仅只是知道都属于"),s("code",[e._v("Food")]),e._v("，"),s("strong",[e._v("失去了获取详细内容的能力")])]),e._v(" "),s("p",[s("strong",[e._v("方案2")]),e._v(": 虽然 "),s("code",[e._v("foods")]),e._v("本质同样为"),s("code",[e._v("Food")]),e._v("列表，但由于泛型下界为"),s("code",[e._v("Bread")]),e._v("，"),s("code",[e._v("foods")]),e._v("列表只能写入"),s("code",[e._v("Bread")]),e._v("和其子类型,同样无法获取到准确类型。")]),e._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[e._v("一些示例")]),e._v(" "),s("h3",{attrs:{id:"泛型类型上下限示例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#泛型类型上下限示例"}},[e._v("#")]),e._v(" 泛型类型上下限示例")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("    public static class  A{}\n\n    public static class  B extends A {}\n\n    @Test\n    public void  test(){\n        //泛型类型的上限是 A或 A 的子类型\n        \n        //编译通过 -> 赋值对象泛型A，在泛型访问内\n        List<? extends  A> extend1 = new ArrayList<A>();\n        \n        //编译通过 -> 赋值对象泛型B， B是A的子类，在泛型访问内\n        List<? extends  A> extend2 = new ArrayList<B>();\n        \n        //编译失败 -> 赋值对象泛型Object， Object不是A的子类，不在泛型访问内\n        List<? extends  A> extend3 = new ArrayList<Object>();\n        \n        //编译通过 -> 赋值对象泛型为空，， 默认采用<? extends  A>\n        List<? extends  A> extend3 = new ArrayList<>();\n        \n        \n        //泛型类型的下限是 A或A的父类型\n        \n        //编译通过 ->  赋值对象泛型A，在泛型访问内\n        List<? super   A> super1 = new ArrayList<A>();\n        \n        //编译失败 ->  赋值对象泛型B， B不是A的父类型，不在泛型访问内\n        List<? super   A> super2 = new ArrayList<B>();\n        \n        //编译失败 ->  赋值对象泛型Object， Object不是A的父类型，不在泛型访问内\n        List<? super   A> super3 = new ArrayList<Object>();\n        \n        //编译通过 ->  赋值对象泛型为空，， 默认采用<? super  A>\n        List<? super   A> super3 = new ArrayList<>();\n    }\n")])])]),s("h3",{attrs:{id:"可写入读取的类型示例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#可写入读取的类型示例"}},[e._v("#")]),e._v(" 可写入读取的类型示例")]),e._v(" "),s("h4",{attrs:{id:"extends示例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#extends示例"}},[e._v("#")]),e._v(" extends示例")]),e._v(" "),s("p",[e._v("extend 更关注结果")]),e._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("    public void  test(){\n        //泛型范围为:A和A的子类型 ，所以A和B类型都是在泛型范围内，所以编译通过\n        List&lt;? extends  A> extend = Arrays.asList(new A(),new B());\n        \n        //由于泛型范围为：A和A的子类型，所以在add的时候,无法确定？是A,B，又或者是其他的C\n        //因此写入是不安全的\n        extend.add(new A()); // 编译失败\n        extend.add(new B()); // 编译失败\n        \n        //由于泛型上限为A,因此可以安全的获取到结果，编译通过\n        extend.forEach(i-> System.out.println(i.getClass()));\n     \n\n    }\n")])])]),s("h4",{attrs:{id:"super示例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#super示例"}},[e._v("#")]),e._v(" super示例")]),e._v(" "),s("p",[e._v("super 更关注参数")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("    public void  test(){\n        List<? super   B> super1 = new ArrayList<>();\n        //泛型范围为:B和B的父类型，所以List的值可为：B类型和父类型为B的数据 （B和B的子类型）\n        \n        //编译失败 ->  A是不B的子类型\n        super1.add(new A());\n        //编译通过 ->  类型为范围下限B\n        super1.add(new B());\n        \n        //泛型类型下限为B,内容：B或B的子类型，\n        //因此这里无法获取到具体的数据类型，所以无法获取到准确的对象，只能返回Object\n        Object o = super1.get(0);\n    }\n    \n     public void  test2(){        \n        List<? super   A> super1 = new ArrayList<>();\n        \n        //编译通过 ->  类型为范围下限A\n        super1.add(new A());\n        //编译通过 ->  B是A的子类型\n        super1.add(new B());\n        \n        //泛型类型下限为A,内容：A或A的子类型，\n        //因此这里无法获取到具体的数据类型，所以无法获取到准确的对象，只能返回Object\n        Object o = super1.get(0);\n    }\n")])])])])])}),[],!1,null,null,null);s.default=a.exports}}]);