(window.webpackJsonp=window.webpackJsonp||[]).push([[109],{424:function(a,t,e){"use strict";e.r(t);var s=e(8),n=Object(s.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("p",[a._v("这里记录一下基础特性，方便后期查找|")]),a._v(" "),t("h2",{attrs:{id:"基础数据"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基础数据"}},[a._v("#")]),a._v(" 基础数据")]),a._v(" "),t("h3",{attrs:{id:"字符串"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字符串"}},[a._v("#")]),a._v(" 字符串")]),a._v(" "),t("blockquote",[t("p",[a._v("在Python中引号括起的都是字符串，其中的引号可以是单引号，也可以是双引号，如下所示")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("name = 'xiaoYan'\nor\nname = \"xiaoYan\"\n")])])]),t("h4",{attrs:{id:"函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#函数"}},[a._v("#")]),a._v(" 函数")]),a._v(" "),t("h5",{attrs:{id:"title"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#title"}},[a._v("#")]),a._v(" title()")]),a._v(" "),t("blockquote",[t("p",[a._v("首字母大写显示")])]),a._v(" "),t("p",[a._v("你可能希望程序将值 "),t("code",[a._v("XiaoYan")]),a._v(" 、"),t("code",[a._v("XIAOYAN")]),a._v("  和 "),t("code",[a._v("xiaoyan")]),a._v("  视为同一个名字，并将它们都显示为"),t("code",[a._v("Xiaoyan")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("name = 'xiaoYan'\n\nprint(name.title())\n")])])]),t("p",[a._v("如果你需要买个单词的首字母大写例如输出:"),t("code",[a._v("XiaoYan")]),a._v(",那么你可以在源字符用空格分隔，如下：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("name = 'xiao yan'\n\nprint(name.title())\n")])])]),t("h5",{attrs:{id:"lower"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#lower"}},[a._v("#")]),a._v(" lower()")]),a._v(" "),t("blockquote",[t("p",[a._v("大写显示")])]),a._v(" "),t("h5",{attrs:{id:"lower-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#lower-2"}},[a._v("#")]),a._v(" lower()")]),a._v(" "),t("blockquote",[t("p",[a._v("小写显示")])]),a._v(" "),t("h5",{attrs:{id:"字符串中使用变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字符串中使用变量"}},[a._v("#")]),a._v(" 字符串中使用变量")]),a._v(" "),t("blockquote",[t("p",[a._v("小写显示")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('first_name = "Lei"\n\nlast_name = "HuangYan"\n\nfull_name = f"{first_name} {last_name}"\n\nprint(full_name)\n\n')])])]),t("p",[a._v("程序将会输出: "),t("code",[a._v("Lei HuangYan")])]),a._v(" "),t("div",{staticClass:"custom-block warning"},[t("p",{staticClass:"custom-block-title"},[a._v("注意")]),a._v(" "),t("p",[a._v("f字符串是Python 3.6引入的。如果你使用的是Python 3.5或更早的版本 (用这么低的版本，建议升级哦) 要使用方法format()方法，而非这种f语法。")]),a._v(" "),t("p",[a._v("要使用方法format()，可在圆括号内列出要在字符串中使用的变量。对于每个变量，都通过一对花括号来引用。这样将按顺序将这些花括号替换为圆括号内列出的变量的值，如下所示：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('full_name = "{} {}".format(first_name, last_name)\n')])])])]),a._v(" "),t("h5",{attrs:{id:"lstrip"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#lstrip"}},[a._v("#")]),a._v(" lstrip()")]),a._v(" "),t("blockquote",[t("p",[a._v("去开头(左边)空格")])]),a._v(" "),t("h5",{attrs:{id:"strip"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#strip"}},[a._v("#")]),a._v(" strip()")]),a._v(" "),t("blockquote",[t("p",[a._v("去两边（开头末尾）空格")])]),a._v(" "),t("h5",{attrs:{id:"rstrip"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#rstrip"}},[a._v("#")]),a._v(" rstrip()")]),a._v(" "),t("blockquote",[t("p",[a._v("去末尾(右边)空格")])]),a._v(" "),t("h3",{attrs:{id:"数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数"}},[a._v("#")]),a._v(" 数")]),a._v(" "),t("h4",{attrs:{id:"整数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#整数"}},[a._v("#")]),a._v(" 整数")]),a._v(" "),t("p",[a._v("分别使用加法、减法、乘法和除法运算，结果都为数字16")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("#加\nprint(13+3)\n#减\nprint(19-3)\n#乘\nprint(2*8)\n#左移-位运算 \n# 00100 == 4\n# 10000 == 16\nprint(4<<2)\n#平方\nprint( 4 ** 2)\n")])])]),t("h4",{attrs:{id:"浮点数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#浮点数"}},[a._v("#")]),a._v(" 浮点数")]),a._v(" "),t("p",[a._v("任意两个数相除时，结果总是浮点数，即便这两个数都是整数且能整除")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("print(16/2)\nprint(16>>1)\n")])])]),t("h4",{attrs:{id:"数中的下划线"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数中的下划线"}},[a._v("#")]),a._v(" 数中的下划线")]),a._v(" "),t("blockquote",[t("p",[a._v("Python 3.6和更高的版本支持。")])]),a._v(" "),t("p",[a._v("书写很大的数时，可使用下划线将其中的数字分组，使其更清晰易读")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("#当你打印这种使用下划线定义的数时，Python不会打印其中的下划线\nuniverse_age = 14_000_000_000\nprint(universe_age)\n")])])]),t("h4",{attrs:{id:"同时给多个变量赋值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#同时给多个变量赋值"}},[a._v("#")]),a._v(" 同时给多个变量赋值")]),a._v(" "),t("p",[a._v("可在一行代码中给多个变量赋值，助于缩短程序并提高其可读性。\n这种做法最常用于将一系列数赋给一组变量。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("x, y, z = 0, 0, 0\n")])])]),t("h4",{attrs:{id:"常量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常量"}},[a._v("#")]),a._v(" 常量")]),a._v(" "),t("p",[a._v("类似于变量，但其值在程序的整个生命周期内保持不变。Python没有内置的常量类型，通常要指出应将特定的变量视为常量，可将其字母全部大写：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("MAX_CONNECTIONS = 5000\n")])])]),t("h3",{attrs:{id:"列表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#列表"}},[a._v("#")]),a._v(" 列表")]),a._v(" "),t("p",[a._v("由一系列按特定顺序排列的元素组成。 你可以将任何东西加入列表中，其中的元素之间可以没有任何关系。 类似于数组")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("friends = ['huishao','saoqiu','maokeng']\n")])])]),t("h4",{attrs:{id:"列表修改"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#列表修改"}},[a._v("#")]),a._v(" 列表修改")]),a._v(" "),t("blockquote",[t("p",[a._v("list[index] = 'new item' 可根据下标修改对应的值")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("friends[0] = 'Li MingHui'\n")])])]),t("h4",{attrs:{id:"列表插入"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#列表插入"}},[a._v("#")]),a._v(" 列表插入")]),a._v(" "),t("blockquote",[t("p",[a._v("list.append('item') 追加到末尾")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('friends.append("Li Peng")\n')])])]),t("blockquote",[t("p",[a._v("list.insert(index,'item') 指定下标位置插入")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('friends.insert(2,"Xiao Kai")\n')])])]),t("h4",{attrs:{id:"列表删除"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#列表删除"}},[a._v("#")]),a._v(" 列表删除")]),a._v(" "),t("blockquote",[t("p",[a._v("del list[index] 指定下标位置删除")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("del friends[2]\n")])])]),t("blockquote",[t("p",[a._v("list.pop(index) ,删除指定下标元素，并返回该元素的值。如果index为空或者不写，那么删除列表末尾元素。")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("print(f'第一个工作的人是:{friends.pop()}')\n\nprint(f'{friends.pop(1)} 是第2个来的人，他也去工作了')\n")])])]),t("blockquote",[t("p",[a._v("list.remove('val') 删除元素值\nremove 只删除第一个指定的值。如果要删除的值可能在列表中出现多次，就需要使用循环来确保将每个值都删除。")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("friends.remove('maokeng')\n")])])]),t("h4",{attrs:{id:"得到列表长度"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#得到列表长度"}},[a._v("#")]),a._v(" 得到列表长度")]),a._v(" "),t("blockquote",[t("p",[a._v("list.len() 长度")])]),a._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("friends.len()\n")])])]),t("h4",{attrs:{id:"列表排序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#列表排序"}},[a._v("#")]),a._v(" 列表排序")]),a._v(" "),t("h5",{attrs:{id:"永久排序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#永久排序"}},[a._v("#")]),a._v(" 永久排序")]),a._v(" "),t("blockquote",[t("p",[a._v("sort() 永久排序，会改变列表，且无法恢复原来的排序位置")])]),a._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("#按字母顺序排序\nfriends.sort()\n\n#按反字母顺序排序\nfriends.sort(reverse=True)\n")])])]),t("h5",{attrs:{id:"临时排序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#临时排序"}},[a._v("#")]),a._v(" 临时排序")]),a._v(" "),t("blockquote",[t("p",[a._v("sorted() 临时排序")])]),a._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("#按字母顺序排序\nsorted(friends)\n\n#按反字母顺序排序\nsorted(friends,reverse=True)\n")])])]),t("h5",{attrs:{id:"倒序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#倒序"}},[a._v("#")]),a._v(" 倒序")]),a._v(" "),t("blockquote",[t("p",[a._v("list.reverse() 倒序")])]),a._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("friends.reverse()\n")])])]),t("h3",{attrs:{id:"遍历"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#遍历"}},[a._v("#")]),a._v(" 遍历")]),a._v(" "),t("blockquote",[t("p",[a._v("for item in list:")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("for item in friends:\n    print(item)\n")])])]),t("h3",{attrs:{id:"数值列表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数值列表"}},[a._v("#")]),a._v(" 数值列表")]),a._v(" "),t("blockquote",[t("p",[a._v("range(startIndex,endIndex,step)  创建一个从 startIndex 开始，endIndex 结束（不包括endIndex）的列表")]),a._v(" "),t("ul",[t("li",[a._v("startIndex 开始下标,如果不指定，默认0")]),a._v(" "),t("li",[a._v("endIndex 结束下标")]),a._v(" "),t("li",[a._v("step 步长")])])]),a._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("for item in range(1,5):\n    print(item)\n")])])]),t("p",[a._v("上述代码，将打印:"),t("code",[a._v("1 2 3 4")])]),a._v(" "),t("h4",{attrs:{id:"步长"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#步长"}},[a._v("#")]),a._v(" 步长")]),a._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("for item in range(1,5,2):\n    print(item)\n")])])]),t("p",[a._v("上述代码，将打印:"),t("code",[a._v("1 3")])]),a._v(" "),t("h4",{attrs:{id:"转列表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#转列表"}},[a._v("#")]),a._v(" 转列表")]),a._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("list( range(1,5) )\n")])])]),t("h4",{attrs:{id:"统计"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#统计"}},[a._v("#")]),a._v(" 统计")]),a._v(" "),t("blockquote",[t("p",[a._v("最小值")])]),a._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("min( range(1,5) )\n")])])]),t("blockquote",[t("p",[a._v("最大值")])]),a._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("max( range(1,5) )\n")])])]),t("blockquote",[t("p",[a._v("求和")])]),a._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("sum( range(1,5) )\n")])])]),t("h4",{attrs:{id:"列表解析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#列表解析"}},[a._v("#")]),a._v(" 列表解析")]),a._v(" "),t("p",[a._v("通常我们要基于现有列表生成一个新列表的时候，通常会定义一个新列表新列表，然后遍历现有列表的值，重新插入的到新列表。如下")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("newList = []\nfor item in range(1, 10):\n  newList.append(item ** 2)\n  \nprint(newList)\n")])])]),t("p",[a._v("如果你觉得上面代码过于繁琐，你可以采用如下写法得到同样的结果")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("squares = [item ** 2 for item in range(1, 10)]\n\nprint(squares)\n")])])]),t("h4",{attrs:{id:"切片"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#切片"}},[a._v("#")]),a._v(" 切片")]),a._v(" "),t("blockquote",[t("p",[a._v("list[startIndex:endIndex]")]),a._v(" "),t("ul",[t("li",[a._v("startIndex: 切片开始下标,\n"),t("ul",[t("li",[a._v("如果不指定,将从头开始")]),a._v(" "),t("li",[a._v("如果为负数,返回后几位")])])]),a._v(" "),t("li",[a._v("endIndex: 切片结束下标\n"),t("ul",[t("li",[a._v("如果不指定为列表尾部")])])])])]),a._v(" "),t("p",[a._v("示例:")]),a._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("nums = list(range(1, 10))\n\n#输出前3个元素\nprint(nums[:3])\n\n#输出前第2~3个元素\nprint(nums[1:3])\n\n#输出后3位\nprint(nums[-3:])\n\n#输出前第2位~列表结尾\nprint(nums[1:])\n\n#从开始到结尾\nprint(nums[:])\n")])])]),t("h4",{attrs:{id:"如何复制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何复制"}},[a._v("#")]),a._v(" 如何复制")]),a._v(" "),t("p",[a._v("如果我们想要复制一个列表，通常会采用直接赋值的方式，如下")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('nums = list(range(1, 10))\n\nnumsCopy = nums\n\nnums.append(11)\nprint("num 增加11")\nprint(nums)\nprint(numsCopy)\n\nnumsCopy.append(12)\nprint("numCopy 增加12")\nprint(nums)\nprint(numsCopy)\n')])])]),t("p",[a._v("但是你会发现: "),t("code",[a._v("numsCopy")]),a._v(" 和"),t("code",[a._v("nums")]),a._v(" 完全一致。")]),a._v(" "),t("p",[a._v("这种语法实际上是让Python将新变量 "),t("code",[a._v("numsCopy")]),a._v("   关联到已与"),t("code",[a._v("nums")]),a._v("相关联的列表，因此这两个变量指向同一个列表。所以他们完全一致")]),a._v(" "),t("p",[a._v("鉴于此,我们可以使用切片"),t("code",[a._v("list[:]")]),a._v("达到复制效果")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('nums = list(range(1, 10))\n\nnumsCopy = nums[:]\n\nnums.append(11)\nprint("num 增加11")\nprint(nums)\nprint(numsCopy)\n\nnumsCopy.append(12)\nprint("numCopy 增加12")\nprint(nums)\nprint(numsCopy)\n')])])]),t("h3",{attrs:{id:"元组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#元组"}},[a._v("#")]),a._v(" 元组")]),a._v(" "),t("div",{staticClass:"custom-block note"},[t("p",{staticClass:"custom-block-title"},[a._v("笔记")]),a._v(" "),t("p",[a._v("列表非常适合用于存储在程序运行期间可能变化的数据集。列表是可以修改的，这对处理网站的用户列表或游戏中的角色列表至关重要。")]),a._v(" "),t("p",[a._v("然而，有时候你需要创建一系列不可修改的元素，元组可以满足这种需求。")]),a._v(" "),t("p",[a._v("Python将不能修改的值称为不可变的 ，而不可变的列表被称为元组")])]),a._v(" "),t("h4",{attrs:{id:"定义元组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#定义元组"}},[a._v("#")]),a._v(" 定义元组")]),a._v(" "),t("p",[a._v("元组看起来和列表非常相似，但不同于列表用"),t("code",[a._v("[]")]),a._v("表示,元组的约定是用"),t("code",[a._v("()")]),a._v("表示。定义元组后，可以像列表一样用下标访问。")]),a._v(" "),t("div",{staticClass:"custom-block warning"},[t("p",{staticClass:"custom-block-title"},[a._v("注意")]),a._v(" "),t("p",[a._v("严格地说，元组是由逗号标识的，圆括号只是让元组看起来更整洁、更清晰。如果你要定义只包含一个元素的元组，必须在这个元素后面加上逗号：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("my_t = (3,)\n")])])]),t("p",[a._v("创建只包含一个元素的元组通常没有意义，但自动生成的元组有可能只有一个元素。")])]),a._v(" "),t("h4",{attrs:{id:"元组的使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#元组的使用"}},[a._v("#")]),a._v(" 元组的使用")]),a._v(" "),t("p",[a._v("元组的使用和"),t("a",{attrs:{href:"#%E5%88%97%E8%A1%A8"}},[a._v("列表")]),a._v("类似，只是不能修改")]),a._v(" "),t("h4",{attrs:{id:"元组的重新赋值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#元组的重新赋值"}},[a._v("#")]),a._v(" 元组的重新赋值")]),a._v(" "),t("p",[a._v("元组的值虽然不能改变，但是可以给元组重新赋值")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("games = ('LOL','Genshin')\nprint(games)\n\ngames = ('Elden Ring','Sekiro: Shadows Die Twice')\nprint(games)\n")])])]),t("h3",{attrs:{id:"if判断"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#if判断"}},[a._v("#")]),a._v(" IF判断")]),a._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('title  = \'fail\'\n\n# 相等\nif title == \'success\':\n    print("成功")\nelse :\n    print("失败")\n\n# and    \nop = 1    \nif title == \'success\' and op == 1:\n    print("成功")\nelse :\n    print("失败")\n    \n# or  \nif title == \'success\' or op == 1:\n    print("成功")\nelse :\n    print("失败")\n\n# in\nif op  in range(0,5):\n    print("成功")\nelse :\n    print("失败")\n\n# not in\nif op  not  in range(0,5):\n    print("成功")\nelse :\n    print("失败")\n    \n\nif op  not  in range(0,5):  print(\'成功\')\n\nif op in range(0, 5):\n    print(\'0-4\')\nelif op in range(5, 10):\n    print(\'5-10\')\nelse:\n    print(\'other\')\n\n# 判断列表    \n\ngoods = []\nif goods:  print(goods)\nelse:\n    print("没有商品了")\n\n\nif len(goods)==0:\n    print("没有商品了")\nelse:\n    print(goods)\n')])])]),t("h3",{attrs:{id:"字典"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字典"}},[a._v("#")]),a._v(" 字典")]),a._v(" "),t("div",{staticClass:"custom-block note"},[t("p",{staticClass:"custom-block-title"},[a._v("笔记")]),a._v(" "),t("p",[a._v("在Python中，字典 是一系列键值对 。\n每个键都与一个值相关联，你可使用键来访问相关联的值。与键相关联的值可以是数、字符串、列表乃至字典。事实上，可将任何Python对象用作字典中的值。")])]),a._v(" "),t("blockquote",[t("p",[a._v("字典用放在花括号"),t("code",[a._v("{}")]),a._v("中的一系列键值对表示，如前面的示例所示：\nuser = {'name': 'Yae Miko', 'sex': '女'}")])]),a._v(" "),t("h4",{attrs:{id:"得到字典值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#得到字典值"}},[a._v("#")]),a._v(" 得到字典值")]),a._v(" "),t("p",[a._v("根据键得到值 "),t("code",[a._v("dict[key]=val")]),a._v("，当值不存在时，会出现异常")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("hero = {'name': 'Yae Miko', 'sex': '女'}\nprint(hero['name'])\n\nprint(hero.get('star'))\nif hero.get('star') == None:\n    print(\"没有此属性\")\nelse:\n    print(\"很难评价\")\n")])])]),t("p",[a._v("使用"),t("code",[a._v("get()")]),a._v("得到值 "),t("code",[a._v("dict.get(key)=val")]),a._v("，当值不存在时，返回"),t("code",[a._v("None")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('if hero.get(\'star\') == None:\n    print("没有此属性")\nelse:\n    print("很难评价")\n')])])]),t("h4",{attrs:{id:"设置字典值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#设置字典值"}},[a._v("#")]),a._v(" 设置字典值")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("hero = {'name': 'Yae Miko', 'sex': '女','star':'5'}\n\nprint(hero['name'])\n\nch_name = 'ch_name'\n\nhero[ch_name] = '八重神子'\nprint(hero[ch_name])\n")])])]),t("h4",{attrs:{id:"删除字典值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#删除字典值"}},[a._v("#")]),a._v(" 删除字典值")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("hero = {'name': 'Yae Miko', 'sex': '女','star':'5'}\n\nprint(hero)\ndel hero['start']\nprint(hero)\n")])])]),t("h4",{attrs:{id:"遍历字典"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#遍历字典"}},[a._v("#")]),a._v(" 遍历字典")]),a._v(" "),t("p",[t("code",[a._v("items")]),a._v(" 得到字典项")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('#拆包\nfor key,val in hero.items():\n    print(key,":",val)\n\n# 通过item下标获取\nfor item in hero.items():\n    print(item[0],item[1])\n')])])]),t("p",[t("code",[a._v("values")]),a._v(" 得到字典值")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("for item in hero.values():\n    print(item)\n")])])]),t("p",[t("code",[a._v("keys")]),a._v(" 得到字典key")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("for item in hero.keys():\n    print(item)\n")])])]),t("p",[a._v("多种数据类型组合遍历")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('lol = {\'name\': \'LOL\', \'heroes\': [{"name": "放逐之刃"}, {"name": "无双剑姬"}, {"name": "刀锋舞者"}, {"name": "青钢影"}\n    , {"name": "灵罗娃娃"}], \'details\': {"type": "moba"}}\n\ngenshin = {\'name\': \'GenShin\',\n           \'heroes\': [{"name": "Yae Miko"}, {"name":"宵宫"}, {"name": "莫娜"}, {"name": "刻晴"}, {"name": "甘雨"}]\n    , \'details\': {"type": "RPG"}}\n\ngames = [lol, genshin]\n\nfor game in games:\n    print(f"当前游戏{game.get(\'name\')},游戏类型:{game.get(\'details\').get(\'type\')}")\n    for hero in game.get("heroes"):\n        print(f"拥有英雄:{hero.get(\'name\')}")\n    print()\n\n')])])]),t("h3",{attrs:{id:"用户输入"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#用户输入"}},[a._v("#")]),a._v(" 用户输入")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('component = input("清输入你的成分: ")\n\nprint("你的成分是:{component}")\n')])])]),t("h3",{attrs:{id:"while循环"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#while循环"}},[a._v("#")]),a._v(" While循环")]),a._v(" "),t("h4",{attrs:{id:"基础用法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基础用法"}},[a._v("#")]),a._v(" 基础用法")]),a._v(" "),t("p",[a._v("循环打印1~5")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("current_number = 1\nwhile current_number <= 5:\n    print(current_number)\n    current_number += 1\n\n")])])]),t("h4",{attrs:{id:"退出循环"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#退出循环"}},[a._v("#")]),a._v(" 退出循环")]),a._v(" "),t("p",[a._v("更改标识退出")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('prompt = "\\n我是一个复读机，你说啥我说啥"\nprompt += "\\n输入 \'q\' 退出程序:"\n\nmessage = ""\nwhile message != \'q\':\n    message = input(prompt)\n    print(f"重复: {message}")\n')])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('prompt = "\\n我是一个复读机，你说啥我说啥"\nprompt += "\\n输入 \'q\' 退出程序:"\n\nactive = True\nwhile active:\n    message = input(prompt)\n    if message == \'quit\':\n        active = False\n    else:\n        print(f"重复: {message}")\n')])])]),t("p",[t("strong",[t("code",[a._v("break")]),a._v("退出")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('prompt = "\\n我是一个复读机，你说啥我说啥"\nprompt += "\\n输入 \'q\' 退出程序:"\n\nwhile True:\n    message = input(prompt)\n    if message == \'quit\':\n        break\n    else:\n        print(f"重复: {message}")\n')])])]),t("p",[t("strong",[a._v("continue")]),a._v(" 跳出当前循环执行下一次")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('current_number = 0\nwhile current_number < 10:\n    current_number += 1\n    if current_number % 2 == 0:\n        print("能整除2跳过，不打印值")\n        continue\n        \n    print(current_number)\n')])])]),t("h3",{attrs:{id:"函数-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#函数-2"}},[a._v("#")]),a._v(" 函数")]),a._v(" "),t("div",{staticClass:"custom-block note"},[t("p",{staticClass:"custom-block-title"},[a._v("笔记")]),a._v(" "),t("p",[a._v("函数是带名字的代码块，用于完成具体的工作。要执行函数定义的特定任务，可调用 该函数。需要在程序中多次执行同一项任务时，无须反复编写完成该任务的代码，")])]),a._v(" "),t("h4",{attrs:{id:"定义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#定义"}},[a._v("#")]),a._v(" 定义")]),a._v(" "),t("p",[a._v("定义一个"),t("code",[a._v("run")]),a._v("方法")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('def run():\n    print("快跑啊")\n#执行run函数    \nrun()\n')])])]),t("div",{staticClass:"custom-block warning"},[t("p",{staticClass:"custom-block-title"},[a._v("注意")]),a._v(" "),t("p",[a._v("函数执行代码，必须要放在函数定义之后")])]),a._v(" "),t("h4",{attrs:{id:"带参函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#带参函数"}},[a._v("#")]),a._v(" 带参函数")]),a._v(" "),t("h4",{attrs:{id:"单个参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#单个参数"}},[a._v("#")]),a._v(" 单个参数")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('def play(name):\n    print(f"在和{name}玩耍")\n\n\nplay("Yae Miko")\n')])])]),t("div",{staticClass:"custom-block note"},[t("p",{staticClass:"custom-block-title"},[a._v("实参和形参")]),a._v(" "),t("p",[a._v("前面定义函数 "),t("code",[a._v("play()")]),a._v("时，要求给变量 "),t("code",[a._v("name")]),a._v("指定一个值。调用这个函数并提供这种信息（人名）时，它将打印相应的问候语。")]),a._v(" "),t("p",[a._v("在函数  "),t("code",[a._v("play()")]),a._v(" 的定义中，变量 "),t("code",[a._v("name")]),a._v(" 是一个"),t("strong",[a._v("形参（parameter）")]),a._v("，即"),t("strong",[a._v("函数完成工作所需的信息")]),a._v("。")]),a._v(" "),t("p",[a._v("在代码 "),t("code",[a._v('play("Yae Miko")')]),a._v(" 中，值 "),t("code",[a._v("Yae Miko")]),a._v("是一个"),t("strong",[a._v("实参（argument）")]),a._v("，即"),t("strong",[a._v("调用函数时传递给函数的信息")]),a._v("。")]),a._v(" "),t("p",[a._v("调用函数时，将要让函数使用的信息放在圆括号内。在"),t("code",[a._v('play("Yae Miko")')]),a._v("中，将实参"),t("code",[a._v("Yae Miko")]),a._v("传递给了函数"),t("code",[a._v("play()")]),a._v("，这个值被赋给了形参  "),t("code",[a._v("name")])])]),a._v(" "),t("h4",{attrs:{id:"多个参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#多个参数"}},[a._v("#")]),a._v(" 多个参数")]),a._v(" "),t("p",[t("strong",[a._v("通用传参")])]),a._v(" "),t("p",[a._v("如果方法有多个参数，实参的和形参的值按位置一一对应。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('def play(name,game):\n    print(f"在和{name}玩{game}")\n\nplay("Yae Miko",\'LOL\')\n')])])]),t("p",[t("strong",[a._v("关键字实参数")])]),a._v(" "),t("p",[a._v("为了防止值传入错五，使用关键字实参，可无视参数传递顺序")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('def play(name,game):\n    print(f"在和{name}玩{game}")\n\nplay(game = \'LOL\',name ="Yae Miko")\n')])])]),t("p",[t("strong",[a._v("默认值")])]),a._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("def play(game,name='八重神子'):\n    print(f\"在和{name}玩{game}\")\n\n#使用默认值\nplay('LOL')\n\n#覆写默认值\nplay('LOL','Yae Miko')\n")])])]),t("div",{staticClass:"custom-block warning"},[t("p",{staticClass:"custom-block-title"},[a._v("注意")]),a._v(" "),t("p",[a._v("使用默认值时，必须先在形参列表中列出没有默认值的形参，再列出有默认值的实参。")]),a._v(" "),t("p",[a._v("也就是说，"),t("strong",[a._v("有默认值的参数必须定义在没有默认值的参数后")])])]),a._v(" "),t("h4",{attrs:{id:"返回值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#返回值"}},[a._v("#")]),a._v(" 返回值")]),a._v(" "),t("p",[a._v("用"),t("code",[a._v("return")]),a._v(" 将语句值返回到调用函数的代码行")]),a._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("def select(code):\n    hero =['Yea Miko' ,'wolf' ,'Ali']\n    return  hero[int(code) % len(hero)]\n\ncode =input(\"请输入一个系统将给你随机一个英雄:\")\n\nprint(f\"你选择的英雄是:{select(code)}\")\n")])])]),t("h4",{attrs:{id:"传递列表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#传递列表"}},[a._v("#")]),a._v(" 传递列表")]),a._v(" "),t("p",[t("strong",[a._v("同步修改")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('def  handel_list(list):\n    list.append("S")\n\nsouList = [1,2,3]\nhandel_list(souList)\nprint(souList)\n\n')])])]),t("p",[t("strong",[a._v("不同步修改")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('def  handel_list(list):\n    list.append("S")\n\nsouList = [1,2,3]\nhandel_list(souList[:])\nprint(souList)\n')])])]),t("h4",{attrs:{id:"传递任意参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#传递任意参数"}},[a._v("#")]),a._v(" 传递任意参数")]),a._v(" "),t("p",[a._v("定义形参时 用"),t("code",[a._v("*")]),a._v("修饰,代表任意数量,调用时可传递任意数量实参。")]),a._v(" "),t("p",[t("code",[a._v("*")]),a._v(" 只能修饰最后一个形参")]),a._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("def  handel_list(cmd,*params):\n    print(f\"今天我们:{cmd}\")\n    for item in params:\n        print(f\"{item}:上线\")\n\n\nhandel_list(\"打游戏\",'禁撸小分队1号','禁撸小分队2号','禁撸小分队3号','禁撸小分队4号','禁撸小分队5号')\n")])])]),t("h4",{attrs:{id:"传递任意关键字参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#传递任意关键字参数"}},[a._v("#")]),a._v(" 传递任意关键字参数")]),a._v(" "),t("p",[a._v("定义形参时 用"),t("code",[a._v("*")]),a._v("修饰,代表任意数量,调用时可传递任意数量实参。")]),a._v(" "),t("p",[t("code",[a._v("*")]),a._v(" 只能修饰最后一个形参")]),a._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("def handel_list(cmd, **params):\n    print(f\"今天我们:{cmd} {params}\")\n    for key, val in params.items():\n        print(f\"{val}:上线\")\n\n\nhandel_list(\"打游戏\", no1='禁撸小分队1号', no2='禁撸小分队2号', no3='禁撸小分队3号', no4='禁撸小分队4号',\n            no5='禁撸小分队5号')\n\n")])])]),t("h3",{attrs:{id:"导入模块"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#导入模块"}},[a._v("#")]),a._v(" 导入模块")]),a._v(" "),t("h4",{attrs:{id:"全部导入"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#全部导入"}},[a._v("#")]),a._v(" 全部导入")]),a._v(" "),t("p",[a._v("定义 "),t("code",[a._v("function.py")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('def run():\n    print("快跑啊")\n')])])]),t("p",[a._v("定义 "),t("code",[a._v("main.py")])]),a._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("import  function\n\nfunction.run()\n")])])]),t("h4",{attrs:{id:"指定函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#指定函数"}},[a._v("#")]),a._v(" 指定函数")]),a._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("from function import run\n\nrun()\n")])])]),t("h4",{attrs:{id:"指定函数并给函数添加别名"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#指定函数并给函数添加别名"}},[a._v("#")]),a._v(" 指定函数并给函数添加别名")]),a._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("from function import run as  thisRun\n\nthisRun()\n")])])]),t("h4",{attrs:{id:"指定别名"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#指定别名"}},[a._v("#")]),a._v(" 指定别名")]),a._v(" "),t("p",[a._v("指定别名后就只能用别名调用，用引入模块名报错会报错")]),a._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("import function as fun\n\nfun.run()\n\n")])])]),t("h4",{attrs:{id:"导入模块所有函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#导入模块所有函数"}},[a._v("#")]),a._v(" 导入模块所有函数")]),a._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("from function import *\n\nrun()\n")])])]),t("h3",{attrs:{id:"类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类"}},[a._v("#")]),a._v(" 类")]),a._v(" "),t("div",{staticClass:"custom-block note"},[t("p",{staticClass:"custom-block-title"},[a._v("笔记")]),a._v(" "),t("p",[t("strong",[a._v("面向对象编程")]),a._v("是最有效的软件编写方法之一。")]),a._v(" "),t("p",[a._v("在面向对象编程中，你编写表示现实世界中的事物和情景的类，并基于这些类来创建对象。")]),a._v(" "),t("p",[a._v("编写类时，你定义一大类对象都有的通用行为。")]),a._v(" "),t("p",[a._v("基于类创建对象时，每个对象都自动具备这种通用行为，然后可根据需要赋予每个对象独特的个性。")]),a._v(" "),t("p",[a._v("使用面向对象编程可模拟现实情景，其逼真程度达到了令人惊讶的地步。")]),a._v(" "),t("p",[a._v("根据类来创建对象称为实例化")])]),a._v(" "),t("h4",{attrs:{id:"定义类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#定义类"}},[a._v("#")]),a._v(" 定义类")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("class Car:\n\n    def __init__(self, brand, model, type):\n        self.brand = brand\n        self.model = model\n        self.type = type\n\n    def run(self):\n        print(f\"传统车:{self.brand} {self.model} 类型:{self.type}\")\n        \n        \nmyCar = Car(\"领克\", '03', '油车')\nmyCar.run()\n")])])]),t("h4",{attrs:{id:"继承类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#继承类"}},[a._v("#")]),a._v(" 继承类")]),a._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("\n## 定义类\nclass Battery:\n\n    def __init__(self, battery_size=75):\n        self.battery_size = battery_size\n        \n#继承\nclass ElectricCar(Car):\n\n    def __init__(self, brand, model):\n        super().__init__(brand, model, '电动车')\n        ## 将一个类作为类的属性\n        self.battery = Battery()\n\n    #重写父类方法\n    def run(self):\n        print(f\"新能源:{self.brand} {self.model} 类型:{self.type},剩余电量:{self.battery.battery_size}\")\n\n\nmyElectricCar = ElectricCar('Tesla', 'model S')\nmyElectricCar.run()\n\n")])])]),t("h4",{attrs:{id:"导入类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#导入类"}},[a._v("#")]),a._v(" 导入类")]),a._v(" "),t("p",[a._v("定义类 "),t("code",[a._v("Car.py")]),a._v(" 内容如下")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('class Car:\n\n    def __init__(self, brand, model, type):\n        self.brand = brand\n        self.model = model\n        self.type = type\n\n    def run(self):\n        print(f"传统车:{self.brand} {self.model} 类型:{self.type}")\n\n\nclass Battery:\n\n    def __init__(self, battery_size=75):\n        self.battery_size = battery_size\n\n\nclass ElectricCar(Car):\n\n    def __init__(self, brand, model):\n        super().__init__(brand, model, \'电动车\')\n        self.battery = Battery()\n\n    def run(self):\n        print(f"新能源:{self.brand} {self.model} 类型:{self.type},剩余电量:{self.battery.battery_size}")\n\n')])])]),t("p",[a._v("新建 "),t("code",[a._v("run.py")]),a._v(" 内容如下")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("from car import Car\nfrom car import ElectricCar\n\n\nmyCar = Car(\"领克\", '03', '油车')\nmyCar.run()\n\nmyElectricCar = ElectricCar('Tesla', 'model S')\nmyElectricCar.run()\n")])])]),t("p",[a._v("或者")]),a._v(" "),t("p",[t("strong",[a._v("一个模块导入多个类")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("from car import Car,ElectricCar\n\n\nmyCar = Car(\"领克\", '03', '油车')\nmyCar.run()\n\nmyElectricCar = ElectricCar('Tesla', 'model S')\nmyElectricCar.run()\n")])])]),t("p",[a._v("或者")]),a._v(" "),t("p",[t("strong",[a._v("导入整个模块")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("import car\n\nmyCar = car.Car(\"领克\", '03', '油车')\nmyCar.run()\n\nmyElectricCar = car.ElectricCar('Tesla', 'model S')\nmyElectricCar.run()\n")])])]),t("p",[t("strong",[a._v("导入模块中的所有类")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("from car import *\n\nmyCar = Car(\"领克\", '03', '油车')\nmyCar.run()\n\nmyElectricCar = ElectricCar('Tesla', 'model S')\nmyElectricCar.run()\n")])])]),t("p",[t("strong",[a._v("使用别名")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("from car import Car as Car,ElectricCar as ECar\n\n\nmyCar = Car(\"领克\", '03', '油车')\nmyCar.run()\n\nmyElectricCar = ECar('Tesla', 'model S')\nmyElectricCar.run()\n")])])]),t("h4",{attrs:{id:"导入其他模块"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#导入其他模块"}},[a._v("#")]),a._v(" 导入其他模块")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("from random import randint,choice\n#生成一个指定范围的随机数\nnum = randint(1, 6)\n\nprint(num)\n\n\n#列表或元组作为参数，并随机返回其中的一个元素：\nplayers = ['charles', 'martina', 'michael', 'florence', 'eli']\nfirst_up = choice(players)\nprint(first_up)\n")])])]),t("h3",{attrs:{id:"文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#文件"}},[a._v("#")]),a._v(" 文件")]),a._v(" "),t("p",[a._v("open函数是 Python 内置函数之一，用于打开文件并返回一个文件对象。")]),a._v(" "),t("p",[a._v("函数的参数进行解释如下：")]),a._v(" "),t("ul",[t("li",[a._v("file：要打开的文件名或文件路径。")]),a._v(" "),t("li",[a._v("mode：打开文件的模式，默认为 'r'（只读模式）。常见的模式包括：\n"),t("ul",[t("li",[a._v("'r'：只读模式")]),a._v(" "),t("li",[a._v("'w'：写入模式，会覆盖原有内容")]),a._v(" "),t("li",[a._v("'x'：创建并写入模式，但如果文件已存在则报错")]),a._v(" "),t("li",[a._v("'a'：追加模式，在文件末尾追加内容")]),a._v(" "),t("li",[a._v("'b'：二进制模式")]),a._v(" "),t("li",[a._v("'t'：文本模式（默认）")])])]),a._v(" "),t("li",[a._v("buffering：设置缓冲策略，控制是否使用缓冲或使用何种缓冲大小。默认值为 None，表示系统默认值。")]),a._v(" "),t("li",[a._v("encoding：指定文件编码方式，用于读取和写入文件。例如，encoding='utf-8'。")]),a._v(" "),t("li",[a._v("errors：指定编码错误处理的策略。默认为 None，表示使用系统默认策略。")]),a._v(" "),t("li",[a._v("newline：用于控制文本模式下的换行符处理。默认为 None，表示使用系统默认的换行符处理。")]),a._v(" "),t("li",[a._v("closefd：关闭文件描述符的标志。默认为 True，表示在文件关闭时也关闭文件描述符。")])]),a._v(" "),t("h4",{attrs:{id:"读文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#读文件"}},[a._v("#")]),a._v(" 读文件")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("with open('pi_digits.txt') as file_object:\n    contents = file_object.read()\n# print(contents)\n")])])]),t("p",[a._v("使读出的文件和原有一致")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("# read()到达文件末尾时返回一个空字符串，而将这个空字符串显示出来时就是一个空行,想要输出原文件用 rstrip() 处理\nwith open('pi_digits.txt') as file_object:\n    for line in file_object:\n        print(line.rstrip())\n")])])]),t("p",[a._v("将读取到的文件保存到lines，后续在with代码块外使用")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("filename = 'pi_digits.txt'\nwith open(filename) as file_object:\n    lines = file_object.readlines()\n\nfor line in lines:\n    print(line.rstrip())\n")])])]),t("h4",{attrs:{id:"写文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#写文件"}},[a._v("#")]),a._v(" 写文件")]),a._v(" "),t("div",{staticClass:"custom-block warning"},[t("p",{staticClass:"custom-block-title"},[a._v("注意")]),a._v(" "),t("p",[a._v("Python只能将字符串写入文本文件。要将数值数据存储到文本文件中，必须先使用函数str() 将其转换为字符串格式。")])]),a._v(" "),t("p",[a._v("写入模式")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("filename = 'pi_digits.txt'\nwith open(filename, 'w', encoding='utf-8') as file_object:\n    for val in range(1 ,100):\n        file_object.write(f\"写入内容:{val}\\n\")\n")])])]),t("p",[a._v("追加模式")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("filename = 'pi_digits.txt'\nwith open(filename, 'a', encoding='utf-8') as file_object:\n    for val in range(1 ,100):\n        if val==1:\n            file_object.write(\"下面插入附加内容\\n\\n\")\n        file_object.write(f\"附加内容:{val}\\n\")\n")])])]),t("h3",{attrs:{id:"异常"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#异常"}},[a._v("#")]),a._v(" 异常")]),a._v(" "),t("p",[a._v("Python使用称为异常的特殊对象来管理程序执行期间发生的错误。")]),a._v(" "),t("p",[a._v("每当发生让Python不知所措的错误时，它都会创建一个异常对象。")]),a._v(" "),t("p",[a._v("如果你编写了处理该异常的代码，程序将继续运行；如果未对异常进行处理，程序将停止并显示traceback，其中包含有关异常的报告。")]),a._v(" "),t("p",[a._v("异常是使用try-except 代码块处理的。")]),a._v(" "),t("p",[a._v("try-except 代码块让Python执行指定的操作，同时告诉Python发生异常时怎么办。")]),a._v(" "),t("p",[a._v("使用try-except 代码块时，即便出现异常，程序也将继续运行：显示你编写的友好的错误消息，而不是令用户迷惑的traceback。")]),a._v(" "),t("p",[a._v("try-except")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('import traceback\nfrom random  import randint\n\nwhile  True:\n    num = int(input("请输入一个数:"))\n    rnum = randint(0, 100)\n    try:\n        print(f"计算的结果为:{rnum / num}")\n    except Exception:\n        print(f"输入值异常{num}")\n')])])]),t("p",[a._v("try-except-else")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('import traceback\nfrom random  import randint\n\nwhile  True:\n    num = int(input("请输入一个数:"))\n    rnum = randint(0, 100)\n    try:\n        print(f"计算的结果为:{rnum / num}")\n    except Exception:\n        print(f"输入值异常{num}")\n    else:\n        print(f"正常值{num}")\n')])])]),t("p",[a._v("打印异常值")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('try:\n    #此处代码省略\nexcept Exception:\n    traceback.print_exc()\nelse:\n    print(f"正常值{num}")\n        \n        \n')])])]),t("p",[a._v("静默失败")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('try:\n    #此处代码省略\nexcept Exception:\n    pass\nelse:\n    print(f"正常值{num}")\n')])])])])}),[],!1,null,null,null);t.default=n.exports}}]);