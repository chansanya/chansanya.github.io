(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{350:function(t,e,n){"use strict";n.r(e);var s=n(7),r=Object(s.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"使用系统参数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用系统参数"}},[t._v("#")]),t._v(" 使用系统参数")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("参数")]),t._v(" "),e("th",[t._v("描述")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("java.version")]),t._v(" "),e("td",[t._v("Java 运行时环境版本")])]),t._v(" "),e("tr",[e("td",[t._v("java.vendor")]),t._v(" "),e("td",[t._v("Java 运行时环境供应商")])]),t._v(" "),e("tr",[e("td",[t._v("java.vendor.url")]),t._v(" "),e("td",[t._v("Java 供应商的 URL")])]),t._v(" "),e("tr",[e("td",[t._v("java.home")]),t._v(" "),e("td",[t._v("Java 安装目录")])]),t._v(" "),e("tr",[e("td",[t._v("java.vm.specification.version")]),t._v(" "),e("td",[t._v("Java 虚拟机规范版本")])]),t._v(" "),e("tr",[e("td",[t._v("java.vm.specification.vendor")]),t._v(" "),e("td",[t._v("Java 虚拟机规范供应商")])]),t._v(" "),e("tr",[e("td",[t._v("java.vm.specification.name")]),t._v(" "),e("td",[t._v("Java 虚拟机规范名称")])]),t._v(" "),e("tr",[e("td",[t._v("java.vm.version")]),t._v(" "),e("td",[t._v("Java 虚拟机实现版本")])]),t._v(" "),e("tr",[e("td",[t._v("java.vm.vendor")]),t._v(" "),e("td",[t._v("Java 虚拟机实现供应商")])]),t._v(" "),e("tr",[e("td",[t._v("java.vm.name")]),t._v(" "),e("td",[t._v("Java 虚拟机实现名称")])]),t._v(" "),e("tr",[e("td",[t._v("java.specification.version")]),t._v(" "),e("td",[t._v("Java 运行时环境规范版本")])]),t._v(" "),e("tr",[e("td",[t._v("java.specification.vendor")]),t._v(" "),e("td",[t._v("Java 运行时环境规范供应商")])]),t._v(" "),e("tr",[e("td",[t._v("java.specification.name")]),t._v(" "),e("td",[t._v("Java 运行时环境规范名称")])]),t._v(" "),e("tr",[e("td",[t._v("java.class.version")]),t._v(" "),e("td",[t._v("Java 类格式版本号")])]),t._v(" "),e("tr",[e("td",[t._v("java.class.path")]),t._v(" "),e("td",[t._v("Java 类路径")])]),t._v(" "),e("tr",[e("td",[t._v("java.library.path \t加载库时搜索的路径列表")]),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("java.io.tmpdir")]),t._v(" "),e("td",[t._v("默认的临时文件路径")])]),t._v(" "),e("tr",[e("td",[t._v("java.compiler")]),t._v(" "),e("td",[t._v("要使用的 JIT 编译器的名称")])]),t._v(" "),e("tr",[e("td",[t._v("java.ext.dirs")]),t._v(" "),e("td",[t._v("一个或多个扩展目录的路径")])]),t._v(" "),e("tr",[e("td",[t._v("os.name")]),t._v(" "),e("td",[t._v("操作系统的名称")])]),t._v(" "),e("tr",[e("td",[t._v("os.arch")]),t._v(" "),e("td",[t._v("操作系统的架构")])]),t._v(" "),e("tr",[e("td",[t._v("os.version")]),t._v(" "),e("td",[t._v("操作系统的版本")])]),t._v(" "),e("tr",[e("td",[t._v("file.separator")]),t._v(" "),e("td",[t._v("文件分隔符（在 UNIX 系统中是“/”）")])]),t._v(" "),e("tr",[e("td",[t._v("path.separator")]),t._v(" "),e("td",[t._v("路径分隔符（在 UNIX 系统中是“:”）")])]),t._v(" "),e("tr",[e("td",[t._v("line.separator")]),t._v(" "),e("td",[t._v("行分隔符（在 UNIX 系统中是“/n”）")])]),t._v(" "),e("tr",[e("td",[t._v("user.name")]),t._v(" "),e("td",[t._v("用户的账户名称")])]),t._v(" "),e("tr",[e("td",[t._v("user.home")]),t._v(" "),e("td",[t._v("用户的主目录")])]),t._v(" "),e("tr",[e("td",[t._v("user.dir")]),t._v(" "),e("td",[t._v("用户的当前工作目录")])])])]),t._v(" "),e("p",[e("strong",[t._v("使用")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('System.getProperty("user.dir")\n')])])]),e("h2",{attrs:{id:"使用oshi"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用oshi"}},[t._v("#")]),t._v(" 使用OSHI")]),t._v(" "),e("p",[e("strong",[t._v("Maven")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("<dependency>\n    <groupId>com.github.oshi</groupId>\n    <artifactId>oshi-core</artifactId>\n    <version>6.4.4</version>\n</dependency>\n\n")])])]),e("p",[e("strong",[t._v("Gradle")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("implementation group: 'com.github.oshi', name: 'oshi-core', version: '6.4.4'\n")])])]),e("p",[e("strong",[t._v("使用")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('public class OshiUtil {\n\n    public static void main(String[] args) {\n\n        System.out.println("Initializing System...");\n        SystemInfo si = new SystemInfo();\n\n        HardwareAbstractionLayer hal = si.getHardware();\n        OperatingSystem os = si.getOperatingSystem();\n\n        System.out.println(os);\n\n        System.out.println("Checking computer system...");\n        printComputerSystem(hal.getComputerSystem());\n\n        System.out.println("Checking Processor...");\n        printProcessor(hal.getProcessor());\n\n        System.out.println("Checking Memory...");\n        printMemory(hal.getMemory());\n\n        System.out.println("Checking CPU...");\n        printCpu(hal.getProcessor());\n\n        System.out.println("Checking Processes...");\n        printProcesses(os, hal.getMemory());\n\n        System.out.println("Checking Sensors...");\n        printSensors(hal.getSensors());\n\n        System.out.println("Checking Power sources...");\n        printPowerSources(hal.getPowerSources());\n\n        System.out.println("Checking Disks...");\n        printDisks(hal.getDiskStores());\n\n        System.out.println("Checking File System...");\n        printFileSystem(os.getFileSystem());\n\n        System.out.println("Checking Network interfaces...");\n        printNetworkInterfaces(hal.getNetworkIFs());\n\n        System.out.println("Checking Network parameterss...");\n        printNetworkParameters(os.getNetworkParams());\n\n        // hardware: displays\n        System.out.println("Checking Displays...");\n        printDisplays(hal.getDisplays());\n\n        // hardware: USB devices\n        //System.out.println("Checking USB Devices...");\n        //printUsbDevices(hal.getUsbDevices(true));\n    }\n\n    private static void printComputerSystem(final ComputerSystem computerSystem) {\n\n        System.out.println("manufacturer: " + computerSystem.getManufacturer());\n        System.out.println("model: " + computerSystem.getModel());\n        System.out.println("serialnumber: " + computerSystem.getSerialNumber());\n        final Firmware firmware = computerSystem.getFirmware();\n        System.out.println("firmware:");\n        System.out.println("  manufacturer: " + firmware.getManufacturer());\n        System.out.println("  name: " + firmware.getName());\n        System.out.println("  description: " + firmware.getDescription());\n        System.out.println("  version: " + firmware.getVersion());\n//      System.out.println("  release date: " + (firmware.getReleaseDate() == null ? "unknown": firmware.getReleaseDate() == null ? "unknown" : FormatUtil.formatDate(firmware.getReleaseDate())));\n        final Baseboard baseboard = computerSystem.getBaseboard();\n        System.out.println("baseboard:");\n        System.out.println("  manufacturer: " + baseboard.getManufacturer());\n        System.out.println("  model: " + baseboard.getModel());\n        System.out.println("  version: " + baseboard.getVersion());\n        System.out.println("  serialnumber: " + baseboard.getSerialNumber());\n    }\n\n    private static void printProcessor(CentralProcessor processor) {\n        System.out.println(processor);\n        System.out.println(" " + processor.getPhysicalPackageCount() + " physical CPU package(s)");\n        System.out.println(" " + processor.getPhysicalProcessorCount() + " physical CPU core(s)");\n        System.out.println(" " + processor.getLogicalProcessorCount() + " logical CPU(s)");\n\n        System.out.println("Identifier: " + processor.getProcessorIdentifier());\n        System.out.println("ProcessorID: " + processor.getProcessorIdentifier().getProcessorID());\n    }\n\n    private static void printMemory(GlobalMemory memory) {\n        System.out.println("Memory: " + FormatUtil.formatBytes(memory.getAvailable()) + "/"\n                + FormatUtil.formatBytes(memory.getTotal()));\n        System.out.println("Swap used: " + FormatUtil.formatBytes(memory.getVirtualMemory().getSwapUsed()) + "/"\n                + FormatUtil.formatBytes(memory.getVirtualMemory().getSwapTotal()));\n    }\n\n    private static void printCpu(CentralProcessor processor) {\n        System.out.println(\n                "Context Switches/Interrupts: " + processor.getContextSwitches() + " / " + processor.getInterrupts());\n\n        long[] prevTicks = processor.getSystemCpuLoadTicks();\n        System.out.println("CPU, IOWait, and IRQ ticks @ 0 sec:" + Arrays.toString(prevTicks));\n        // Wait a second...\n        Util.sleep(1000);\n        long[] ticks = processor.getSystemCpuLoadTicks();\n        System.out.println("CPU, IOWait, and IRQ ticks @ 1 sec:" + Arrays.toString(ticks));\n        long user = ticks[TickType.USER.getIndex()] - prevTicks[TickType.USER.getIndex()];\n        long nice = ticks[TickType.NICE.getIndex()] - prevTicks[TickType.NICE.getIndex()];\n        long sys = ticks[TickType.SYSTEM.getIndex()] - prevTicks[TickType.SYSTEM.getIndex()];\n        long idle = ticks[TickType.IDLE.getIndex()] - prevTicks[TickType.IDLE.getIndex()];\n        long iowait = ticks[TickType.IOWAIT.getIndex()] - prevTicks[TickType.IOWAIT.getIndex()];\n        long irq = ticks[TickType.IRQ.getIndex()] - prevTicks[TickType.IRQ.getIndex()];\n        long softirq = ticks[TickType.SOFTIRQ.getIndex()] - prevTicks[TickType.SOFTIRQ.getIndex()];\n        long steal = ticks[TickType.STEAL.getIndex()] - prevTicks[TickType.STEAL.getIndex()];\n        long totalCpu = user + nice + sys + idle + iowait + irq + softirq + steal;\n\n        System.out.format(\n                "User: %.1f%% Nice: %.1f%% System: %.1f%% Idle: %.1f%% IOwait: %.1f%% IRQ: %.1f%% SoftIRQ: %.1f%% Steal: %.1f%%%n",\n                100d * user / totalCpu, 100d * nice / totalCpu, 100d * sys / totalCpu, 100d * idle / totalCpu,\n                100d * iowait / totalCpu, 100d * irq / totalCpu, 100d * softirq / totalCpu, 100d * steal / totalCpu);\n        System.out.format("CPU load: %.1f%% (counting ticks)%n", processor.getSystemCpuLoadBetweenTicks(prevTicks) * 100);\n        //System.out.format("CPU load: %.1f%% (OS MXBean)%n", processor.getSystemCpuLoad() * 100);\n        double[] loadAverage = processor.getSystemLoadAverage(3);\n        System.out.println("CPU load averages:" + (loadAverage[0] < 0 ? " N/A" : String.format(" %.2f", loadAverage[0]))\n                + (loadAverage[1] < 0 ? " N/A" : String.format(" %.2f", loadAverage[1]))\n                + (loadAverage[2] < 0 ? " N/A" : String.format(" %.2f", loadAverage[2])));\n        // per core CPU\n//      StringBuilder procCpu = new StringBuilder("CPU load per processor:");\n//      double[] load = processor.getProcessorCpuLoadBetweenTicks();\n//      for (double avg : load) {\n//          procCpu.append(String.format(" %.1f%%", avg * 100));\n//      }\n//      System.out.println(procCpu.toString());\n    }\n\n    private static void printProcesses(OperatingSystem os, GlobalMemory memory) {\n        System.out.println("Processes: " + os.getProcessCount() + ", Threads: " + os.getThreadCount());\n        // Sort by highest CPU\n\n\n        List<OSProcess> procs = os.getProcesses( );\n\n        System.out.println("   PID  %CPU %MEM       VSZ       RSS Name");\n        for (int i = 0; i < procs.size() && i < 5; i++) {\n            OSProcess p = procs.get(i);\n            System.out.format(" %5d %5.1f %4.1f %9s %9s %s%n", p.getProcessID(),\n                    100d * (p.getKernelTime() + p.getUserTime()) / p.getUpTime(),\n                    100d * p.getResidentSetSize() / memory.getTotal(), FormatUtil.formatBytes(p.getVirtualSize()),\n                    FormatUtil.formatBytes(p.getResidentSetSize()), p.getName());\n        }\n    }\n\n    private static void printSensors(Sensors sensors) {\n        System.out.println("Sensors:");\n        System.out.format(" CPU Temperature: %.1f°C%n", sensors.getCpuTemperature());\n        System.out.println(" Fan Speeds: " + Arrays.toString(sensors.getFanSpeeds()));\n        System.out.format(" CPU Voltage: %.1fV%n", sensors.getCpuVoltage());\n    }\n\n    private static void printPowerSources(List<PowerSource> list) {\n        StringBuilder sb = new StringBuilder("Power: ");\n        if (list.size() == 0) {\n            sb.append("Unknown");\n        } else {\n            double timeRemaining = list.get(0).getTimeRemainingInstant();\n            if (timeRemaining < -1d) {\n                sb.append("Charging");\n            } else if (timeRemaining < 0d) {\n                sb.append("Calculating time remaining");\n            } else {\n                sb.append(String.format("%d:%02d remaining", (int) (timeRemaining / 3600),\n                        (int) (timeRemaining / 60) % 60));\n            }\n        }\n        for (PowerSource pSource : list) {\n            sb.append(String.format("%n %s @ %.1f%%", pSource.getName(), pSource.getRemainingCapacityPercent() * 100d));\n        }\n        System.out.println(sb.toString());\n    }\n\n    private static void printDisks(List<HWDiskStore> list) {\n        System.out.println("Disks:");\n        for (HWDiskStore disk : list) {\n            boolean readwrite = disk.getReads() > 0 || disk.getWrites() > 0;\n            System.out.format(" %s: (model: %s - S/N: %s) size: %s, reads: %s (%s), writes: %s (%s), xfer: %s ms%n",\n                    disk.getName(), disk.getModel(), disk.getSerial(),\n                    disk.getSize() > 0 ? FormatUtil.formatBytesDecimal(disk.getSize()) : "?",\n                    readwrite ? disk.getReads() : "?", readwrite ? FormatUtil.formatBytes(disk.getReadBytes()) : "?",\n                    readwrite ? disk.getWrites() : "?", readwrite ? FormatUtil.formatBytes(disk.getWriteBytes()) : "?",\n                    readwrite ? disk.getTransferTime() : "?");\n            List<HWPartition> partitions = disk.getPartitions();\n            if (partitions == null) {\n                // TODO Remove when all OS\'s implemented\n                continue;\n            }\n            for (HWPartition part : partitions) {\n                System.out.format(" |-- %s: %s (%s) Maj:Min=%d:%d, size: %s%s%n", part.getIdentification(),\n                        part.getName(), part.getType(), part.getMajor(), part.getMinor(),\n                        FormatUtil.formatBytesDecimal(part.getSize()),\n                        part.getMountPoint().isEmpty() ? "" : " @ " + part.getMountPoint());\n            }\n        }\n    }\n\n    private static void printFileSystem(FileSystem fileSystem) {\n        System.out.println("File System:");\n\n        System.out.format(" File Descriptors: %d/%d%n", fileSystem.getOpenFileDescriptors(),\n                fileSystem.getMaxFileDescriptors());\n\n        List<OSFileStore> fsArray = fileSystem.getFileStores();\n        for (OSFileStore fs : fsArray) {\n            long usable = fs.getUsableSpace();\n            long total = fs.getTotalSpace();\n            System.out.format(\n                    " %s (%s) [%s] %s of %s free (%.1f%%) is %s "\n                            + (fs.getLogicalVolume() != null && fs.getLogicalVolume().length() > 0 ? "[%s]" : "%s")\n                            + " and is mounted at %s%n",\n                    fs.getName(), fs.getDescription().isEmpty() ? "file system" : fs.getDescription(), fs.getType(),\n                    FormatUtil.formatBytes(usable), FormatUtil.formatBytes(fs.getTotalSpace()), 100d * usable / total,\n                    fs.getVolume(), fs.getLogicalVolume(), fs.getMount());\n        }\n    }\n\n    private static void printNetworkInterfaces(List<NetworkIF> list) {\n        System.out.println("Network interfaces:");\n        for (NetworkIF net : list) {\n            System.out.format(" Name: %s (%s)%n", net.getName(), net.getDisplayName());\n            System.out.format("   MAC Address: %s %n", net.getMacaddr());\n            System.out.format("   MTU: %s, Speed: %s %n", net.getMTU(), FormatUtil.formatValue(net.getSpeed(), "bps"));\n            System.out.format("   IPv4: %s %n", Arrays.toString(net.getIPv4addr()));\n            System.out.format("   IPv6: %s %n", Arrays.toString(net.getIPv6addr()));\n            boolean hasData = net.getBytesRecv() > 0 || net.getBytesSent() > 0 || net.getPacketsRecv() > 0\n                    || net.getPacketsSent() > 0;\n            System.out.format("   Traffic: received %s/%s%s; transmitted %s/%s%s %n",\n                    hasData ? net.getPacketsRecv() + " packets" : "?",\n                    hasData ? FormatUtil.formatBytes(net.getBytesRecv()) : "?",\n                    hasData ? " (" + net.getInErrors() + " err)" : "",\n                    hasData ? net.getPacketsSent() + " packets" : "?",\n                    hasData ? FormatUtil.formatBytes(net.getBytesSent()) : "?",\n                    hasData ? " (" + net.getOutErrors() + " err)" : "");\n        }\n    }\n\n    private static void printNetworkParameters(NetworkParams networkParams) {\n        System.out.println("Network parameters:");\n        System.out.format(" Host name: %s%n", networkParams.getHostName());\n        System.out.format(" Domain name: %s%n", networkParams.getDomainName());\n        System.out.format(" DNS servers: %s%n", Arrays.toString(networkParams.getDnsServers()));\n        System.out.format(" IPv4 Gateway: %s%n", networkParams.getIpv4DefaultGateway());\n        System.out.format(" IPv6 Gateway: %s%n", networkParams.getIpv6DefaultGateway());\n    }\n\n    private static void printDisplays(List<Display> list) {\n        System.out.println("Displays:");\n        int i = 0;\n        for (Display display : list) {\n            System.out.println(" Display " + i + ":");\n            System.out.println(display.toString());\n            i++;\n        }\n    }\n\n    private static void printUsbDevices(List<UsbDevice> list) {\n        System.out.println("USB Devices:");\n        for (UsbDevice usbDevice : list) {\n            System.out.println(usbDevice.toString());\n        }\n    }\n}\n\n\n')])])])])}),[],!1,null,null,null);e.default=r.exports}}]);