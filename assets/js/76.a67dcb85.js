(window.webpackJsonp=window.webpackJsonp||[]).push([[76],{484:function(t,a,e){"use strict";e.r(a);var n=e(14),r=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h3",{attrs:{id:"threadpoolexecutor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#threadpoolexecutor"}},[t._v("#")]),t._v(" ThreadPoolExecutor")]),t._v(" "),a("h4",{attrs:{id:"构造参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#构造参数"}},[t._v("#")]),t._v(" 构造参数")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("拒绝策略")]),t._v(" "),a("th")])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("corePoolSize")]),t._v(" "),a("td",[t._v("核心线程数")])]),t._v(" "),a("tr",[a("td",[t._v("maximumPoolSize")]),t._v(" "),a("td",[t._v("最大线程数")])]),t._v(" "),a("tr",[a("td",[t._v("TimeUnit")]),t._v(" "),a("td",[t._v("线程活跃时间")])]),t._v(" "),a("tr",[a("td",[t._v("BlockingQueue"),a("Runnable")],1),t._v(" "),a("td",[t._v("活跃时间单位")])]),t._v(" "),a("tr",[a("td",[t._v("workQueue")]),t._v(" "),a("td",[t._v("工作队列")])]),t._v(" "),a("tr",[a("td",[t._v("ThreadFactory")]),t._v(" "),a("td",[t._v("线程工程")])]),t._v(" "),a("tr",[a("td",[t._v("RejectedExecutionHandler")]),t._v(" "),a("td",[t._v("拒绝策略")])])])]),t._v(" "),a("p",[t._v("线程池可执行线程数： 最大线程数 + 等待队列线程数")]),t._v(" "),a("p",[t._v("超出等待队列的线程将进入拒绝策略")]),t._v(" "),a("p",[t._v("等待队列"),a("code",[t._v("BlockingQueue")])]),t._v(" "),a("p",[a("strong",[t._v("LinkedBlockingQueue 基于链表实现")])]),t._v(" "),a("p",[t._v("使用同一个"),a("code",[t._v("putLock")]),t._v(" 和"),a("code",[t._v("takeLock")]),t._v(" 分别控制读写，并发能力强")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("public LinkedBlockingQueue(int capacity) {\n    if (capacity <= 0) throw new IllegalArgumentException();\n    this.capacity = capacity;\n    last = head = new Node<E>(null);\n}\n")])])]),a("p",[a("strong",[t._v("ArrayBlockingQueue 基于数组实现")])]),t._v(" "),a("p",[t._v("使用同一个"),a("code",[t._v("lock")]),t._v("控制读写，无法真正实现读写并行")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("public ArrayBlockingQueue(int capacity, boolean fair) {\n    if (capacity <= 0)\n        throw new IllegalArgumentException();\n    this.items = new Object[capacity];\n    lock = new ReentrantLock(fair);\n    notEmpty = lock.newCondition();\n    notFull =  lock.newCondition();\n}\n")])])]),a("h4",{attrs:{id:"拒绝策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#拒绝策略"}},[t._v("#")]),t._v(" 拒绝策略")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("拒绝策略")]),t._v(" "),a("th")])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("new ThreadPoolExecutor.AbortPolicy()")]),t._v(" "),a("td",[t._v("超出抛异常")])]),t._v(" "),a("tr",[a("td",[t._v("new ThreadPoolExecutor.CallerRunsPolicy()")]),t._v(" "),a("td",[t._v("由调用方线程执行")])]),t._v(" "),a("tr",[a("td",[t._v("new ThreadPoolExecutor.DiscardOldestPolicy()")]),t._v(" "),a("td",[t._v("丢弃老的任务")])]),t._v(" "),a("tr",[a("td",[t._v("new ThreadPoolExecutor.DiscardPolicy()")]),t._v(" "),a("td",[t._v("丢弃任务")])])])]),t._v(" "),a("h3",{attrs:{id:"cyclicbarrier"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cyclicbarrier"}},[t._v("#")]),t._v(" CyclicBarrier")]),t._v(" "),a("p",[t._v("可循环利用的屏障,用于所有线程都等待完成后才会继续下一步行动的场景。")]),t._v(" "),a("p",[a("strong",[t._v("使用")])]),t._v(" "),a("p",[a("code",[t._v("CyclicBarrier")]),t._v(" 的构造函数如下")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CyclicBarrier")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" parties"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CyclicBarrier")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" parties"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runnable")]),t._v(" barrierAction"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("参数代表的意思如下")]),t._v(" "),a("ul",[a("li",[t._v("parties  参与线程个数")]),t._v(" "),a("li",[t._v("barrierAction  需要执行的线程")])]),t._v(" "),a("p",[a("strong",[t._v("重要方法")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("public int await() throws InterruptedException, BrokenBarrierException\n\npublic int await(long timeout, TimeUnit unit) throws InterruptedException, BrokenBarrierException, TimeoutException\n")])])]),a("p",[a("code",[t._v("await()")]),t._v(" 表示当前线程已经到了栅栏处等待")]),t._v(" "),a("p",[a("code",[t._v("await(long timeout, TimeUnit unit)")]),t._v(" 在等待的时候设置了超时时间，如果超时的话，会抛出"),a("code",[t._v("java.util.concurrent.TimeoutException")])]),t._v(" "),a("h4",{attrs:{id:"示例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#示例"}},[t._v("#")]),t._v(" 示例")]),t._v(" "),a("p",[t._v("3人闯关，但是必须等待每个人都结束后才能开始下一关")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('    private static final int THREADS = 3;\n    private static final int TIME_OUT = 3;\n\n    public static void main(String[] args) {\n\n        CyclicBarrier barrier = new CyclicBarrier(THREADS,()->{\n            System.out.println("go go go ... ");\n        });\n\n        for (int i = 0; i < THREADS; i++) {\n            ThreadUtil.execute(()->{\n                try {\n                    run(barrier);\n                    System.out.println("通关啦111");\n                } catch (Exception  e) {;\n                    throw new RuntimeException(e);\n                }\n            });\n            System.out.println("通关啦222");\n        }\n\n        System.out.println("通关啦");\n    }\n\n\n    private static void run(CyclicBarrier barrier) throws Exception {\n        String name = Thread.currentThread().getName();\n\n        System.out.println(name+":进入游戏，开始第一关");\n        barrier.await(TIME_OUT, TimeUnit.SECONDS);\n\n        System.out.println(name+":来到了第二关");\n        barrier.await(TIME_OUT, TimeUnit.SECONDS);\n\n        System.out.println(name+":来到了进入了第三关");\n        barrier.await(TIME_OUT, TimeUnit.SECONDS);\n\n        System.out.println(name+":开始结算");\n    }\n\n\n')])])])])}),[],!1,null,null,null);a.default=r.exports}}]);