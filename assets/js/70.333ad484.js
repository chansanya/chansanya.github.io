(window.webpackJsonp=window.webpackJsonp||[]).push([[70],{395:function(e,s,t){"use strict";t.r(s);var n=t(7),a=Object(n.a)({},(function(){var e=this,s=e._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("p",[e._v("extends 和 super")]),e._v(" "),s("p",[e._v("extends 上界：<? extends T> 表示"),s("strong",[e._v("泛型类型")]),e._v("的上界是T或T的子类型。这意味着你可以读取泛型对象的值，但不能往里面写入。")]),e._v(" "),s("p",[e._v("super 下界：<? super T> 表示"),s("strong",[e._v("泛型类型")]),e._v("的下界是T或T的父类型。这意味着你可以往泛型对象里写入T类型或T的子类型，但不能读取具体类型。")]),e._v(" "),s("p",[e._v("这里的上下界表示：定义泛型时，"),s("strong",[e._v("实际类型")]),e._v("的边界")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("    public static class  Food{}\n\n    public static class  Bread extends Food {}\n\n    public static class  Noodles extends Food {}\n    \n    List<? extends    A> list2 = new ArrayList<?>();\n    List<? super   B> list = new ArrayList<?>();\n")])])]),s("p",[e._v("在上面示例里 "),s("strong",[e._v("实际类型"),s("code",[e._v("？")])]),e._v("，\n上界 "),s("code",[e._v("<? extends A>")]),e._v(" ，也就是说"),s("code",[e._v("？")]),e._v("的范围为,A和A的子类型，")]),e._v(" "),s("p",[e._v("定义了上界，也就是定义了最上级的形态，一旦定义将无法变更。")]),e._v(" "),s("p",[e._v("例如定义了一个 "),s("code",[e._v("List<? extends Food>")]),e._v(" 最上级形态为 "),s("code",[e._v("Food")]),e._v(",")]),e._v(" "),s("p",[e._v("我们给这个列表放置了"),s("code",[e._v("Bread")]),e._v(", "),s("code",[e._v("List<? extends Food> foods= new ArrayList<Bread>")])]),e._v(" "),s("p",[e._v("这时候我想要："),s("code",[e._v("foods.add(noodles)")]),e._v(" ,"),s("code",[e._v("noodles")]),e._v(" 继承于 "),s("code",[e._v("Bread")]),e._v("，理论上来说这样是没问题的")]),e._v(" "),s("p",[e._v("但是，此时的"),s("code",[e._v("foods")]),e._v(" 类型为"),s("code",[e._v("Bread")]),e._v(" 。把 "),s("code",[e._v("noodles")]),e._v(" 放入 "),s("code",[e._v("Bread")]),e._v(" 的列表显然不合理。")]),e._v(" "),s("p",[e._v("所以 extends 失去了写入能力")]),e._v(" "),s("p",[e._v("下界 "),s("code",[e._v("<? super B>")]),e._v(" ，也就是说"),s("code",[e._v("？")]),e._v("的范围为,B和B的父类型")]),e._v(" "),s("p",[e._v("定义了上界，也就是定义了最下级的形态,同样用上面的例子")]),e._v(" "),s("p",[e._v("例如定义了一个 "),s("code",[e._v("List<? super Food>")]),e._v(" 最下级形态为 "),s("code",[e._v("Food")]),e._v(",")]),e._v(" "),s("p",[e._v("我在 "),s("code",[e._v("Food")]),e._v(" 列表里无论是加入"),s("code",[e._v("Bread")]),e._v(","),s("code",[e._v("noodles")]),e._v("显然都是合理的。")]),e._v(" "),s("p",[e._v("但是在取出的时候，我无法知道拿到的是什么，我只能知道他们都属于"),s("code",[e._v("Food")])]),e._v(" "),s("p",[e._v("所以 super 失去了获取详细内容的能力")]),e._v(" "),s("p",[e._v("上面这段话分可两部分理解： 泛型类型上下限 ，可写入读取的类型")]),e._v(" "),s("h3",{attrs:{id:"泛型类型上下限示例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#泛型类型上下限示例"}},[e._v("#")]),e._v(" 泛型类型上下限示例")]),e._v(" "),s("p",[e._v("示例")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("    public static class  A{}\n\n    public static class  B extends A {}\n\n    @Test\n    public void  test(){\n        //泛型类型的上限是 A或 A 的子类型\n        \n        //编译通过 -> 赋值对象泛型A，在泛型访问内\n        List<? extends  A> extend1 = new ArrayList<A>();\n        \n        //编译通过 -> 赋值对象泛型B， B是A的子类，在泛型访问内\n        List<? extends  A> extend2 = new ArrayList<B>();\n        \n        //编译失败 -> 赋值对象泛型Object， Object不是A的子类，不在泛型访问内\n        List<? extends  A> extend3 = new ArrayList<Object>();\n        \n        //编译通过 -> 赋值对象泛型为空，， 默认采用<? extends  A>\n        List<? extends  A> extend3 = new ArrayList<>();\n        \n        \n        //泛型类型的下限是 A或A的父类型\n        \n        //编译通过 ->  赋值对象泛型A，在泛型访问内\n        List<? super   A> super1 = new ArrayList<A>();\n        \n        //编译失败 ->  赋值对象泛型B， B不是A的父类型，不在泛型访问内\n        List<? super   A> super2 = new ArrayList<B>();\n        \n        //编译失败 ->  赋值对象泛型Object， Object不是A的父类型，不在泛型访问内\n        List<? super   A> super3 = new ArrayList<Object>();\n        \n        //编译通过 ->  赋值对象泛型为空，， 默认采用<? super  A>\n        List<? super   A> super3 = new ArrayList<>();\n    }\n")])])]),s("h3",{attrs:{id:"可写入读取的类型示例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#可写入读取的类型示例"}},[e._v("#")]),e._v(" 可写入读取的类型示例")]),e._v(" "),s("h4",{attrs:{id:"extends示例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#extends示例"}},[e._v("#")]),e._v(" extends示例")]),e._v(" "),s("p",[e._v("extend 更关注结果")]),e._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("    public void  test(){\n        //泛型范围为:A和A的子类型 ，所以A和B类型都是在泛型范围内，所以编译通过\n        List&lt;? extends  A> extend = Arrays.asList(new A(),new B());\n        \n        //由于泛型范围为：A和A的子类型，所以在add的时候,无法确定？是A,B，又或者是其他的C\n        //因此写入是不安全的\n        extend.add(new A()); // 编译失败\n        extend.add(new B()); // 编译失败\n        \n        //由于泛型上限为A,因此可以安全的获取到结果，编译通过\n        extend.forEach(i-> System.out.println(i.getClass()));\n     \n\n    }\n")])])]),s("h4",{attrs:{id:"super示例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#super示例"}},[e._v("#")]),e._v(" super示例")]),e._v(" "),s("p",[e._v("super 更关注参数")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("    public void  test(){\n        List<? super   B> super1 = new ArrayList<>();\n        //泛型范围为:B和B的父类型，所以List的值可为：B类型和父类型为B的数据 （B和B的子类型）\n        \n        //编译失败 ->  A是不B的子类型\n        super1.add(new A());\n        //编译通过 ->  类型为范围下限B\n        super1.add(new B());\n        \n        //泛型类型下限为B,内容：B或B的子类型，\n        //因此这里无法获取到具体的数据类型，所以无法获取到准确的对象，只能返回Object\n        Object o = super1.get(0);\n    }\n    \n     public void  test2(){        \n        List<? super   A> super1 = new ArrayList<>();\n        \n        //编译通过 ->  类型为范围下限A\n        super1.add(new A());\n        //编译通过 ->  B是A的子类型\n        super1.add(new B());\n        \n        //泛型类型下限为A,内容：A或A的子类型，\n        //因此这里无法获取到具体的数据类型，所以无法获取到准确的对象，只能返回Object\n        Object o = super1.get(0);\n    }\n")])])])])}),[],!1,null,null,null);s.default=a.exports}}]);